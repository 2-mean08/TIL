-----

# React를 이용한 GPS 기반 현재 위치 반영 지도 구현

이 문서는 React의 주요 특징에 대해 설명합니다.

-----

## 1\. React 기본 개념

React는 사용자 인터페이스를 구축하기 위한 JavaScript 라이브러리입니다.

### 1.1 컴포넌트 기반 구조

React는 UI를 **컴포넌트**라고 불리는 재사용 가능한 독립적인 조각으로 나눕니다. 각 컴포넌트는 자체적인 로직과 뷰를 가집니다.

### 1.2 동작 원리

React의 핵심 동작 원리는 다음과 같습니다.

  * **JSX (JavaScript XML)**
    JavaScript 코드 내에서 HTML과 유사한 마크업을 작성할 수 있도록 하는 문법 확장입니다. 이를 통해 UI 구조를 선언적으로 표현할 수 있습니다.

    ```jsx
    // JSX 예시
    const element = <h1>Hello, React!</h1>;
    ```

  * **가상 DOM (Virtual DOM)**
    웹 브라우저는 웹 페이지의 구조를 \*\*DOM (Document Object Model)\*\*이라는 트리 형태로 관리합니다. 사용자의 행동(클릭, 입력 등)으로 인해 화면에 변화가 필요할 때, 이 DOM을 직접 조작하면 변경 사항이 많을수록 성능이 느려질 수 있습니다. React는 이러한 성능 문제를 해결하기 위해 가상 DOM을 사용합니다.

    1.  React는 실제 DOM의 복사본인 **가상 DOM**을 메모리에 저장합니다.
    2.  데이터에 변경이 발생하면 (예: 사용자가 지도 위치를 옮김), React는 새로운 가상 DOM을 만듭니다.
    3.  이전 가상 DOM과 새로운 가상 DOM을 비교하여 바뀐 부분만 찾아냅니다.
    4.  그리고 그 바뀐 부분만 실제 DOM에 **딱 한 번** 적용하여 효율적으로 UI를 업데이트합니다.

  * **데이터 흐름 (State와 Props)**
    React 컴포넌트 간의 데이터 흐름은 단방향이며, 주로 `State`와 `Props`를 통해 관리됩니다.

      * **State**: 컴포넌트가 내부에서 자체적으로 관리하는 데이터입니다. `State`가 변경되면 해당 컴포넌트와 그 자식 컴포넌트들이 자동으로 다시 렌더링됩니다.
          * **예시**: `SearchComponent`가 사용자가 입력한 검색어를 `state`로 가짐.
      * **Props**: 부모 컴포넌트가 자식 컴포넌트에게 전달하는 데이터입니다. 자식 컴포넌트는 `props`를 직접 수정할 수 없습니다.
          * **예시**: `App` (최상위 컴포넌트)이 지도에 표시할 위치 좌표를 `MapComponent`에게 `props`로 전달.

### 1.3 Hook

React `Hook`은 함수형 컴포넌트에서 `state`와 생명주기 기능(lifecycle features)을 "연동(hook into)"할 수 있게 해주는 함수입니다. `useState`, `useEffect`, `useRef` 등이 대표적입니다.

-----
